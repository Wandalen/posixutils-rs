// 
// Copyright (c) 2024 Hemi Labs, Inc.
// 
// This file is part of the posixutils-rs project covered under
// the MIT License.  For the full license text, please see the LICENSE
// file in the root directory of this project.
// SPDX-License-Identifier: MIT
// 

// ----- Basic rules

WHITESPACE = _{ " " | "\t" }
NEWLINE    = _{ "\r"? ~ "\n" }

text_arg = @{ (!(WHITESPACE | NEWLINE) ~ ANY)+ }
// -- List of Callable macros
macro_arg = { !(d1_block | dl_block | rs_submacro | bt) ~ (block_partial_implicit | inline) }

arg = { macro_arg | text_arg }

text_line = { !"." ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

// ----- Macro types

block_full_explicit = { bd_block | bf_block | bk_block | bl_block }

block_full_implicit = { nd_block | nm_block | sh_block | ss_block }

block_partial_implicit = { aq_block | bq_block | brq_block | d1_block | dl_block | dq_block | en_block | op_block | pq_block | ql_block | qq_block | sq_block | vt_block }

rs_submacro = { a | b | c | d | i | j | n | o | p | q | r | t | u | v }

text_production = { at | bsx | bx | dx | fx | nx | ox | st }

inline = { rs_submacro | ad | an | ap | ar | bt | cd | cm | text_production }

// ----- Mdoc document

element = { ("." ~ (block_full_explicit | block_full_implicit | block_partial_implicit | inline)) | text_line }

mdoc = { SOI ~ element* ~ EOI }

// ----- Block full-explicit macros

// -- Bd

bd_type = {
    text_arg
}

offset = {
    text_arg
}

compact = { "-compact" }

bd_open  = { "Bd" ~ bd_type ~ ("-offset" ~ offset)? ~ compact? ~ NEWLINE }
ed_close = { ".Ed" ~ NEWLINE? }
bd_block = { bd_open ~ element* ~ ed_close }

// -- Bf

bf_type = {
    text_arg
}

bf_open  = { "Bf" ~ bf_type ~ NEWLINE }
ef_close = { ".Ef" ~ NEWLINE? }
bf_block = { bf_open ~ element* ~ ef_close }

// -- Bk

bk_words = { "-words" }

bk_open  = { "Bk" ~ bk_words ~ text_arg* ~ NEWLINE }
ek_close = { ".Ek" ~ NEWLINE? }
bk_block = { bk_open ~ element* ~ ek_close }

// -- Bl

bl_type = {
    text_arg
}

bl_columns = { text_arg+ }

bl_open  = { "Bl" ~ bl_type ~ (("-width" | "-offset") ~ offset)? ~ compact? ~ bl_columns* ~ NEWLINE }
el_close = { ".El" ~ NEWLINE? }
bl_block = { bl_open ~ element* ~ el_close }

// ----- Block full-implicit macros

block_line = { (!NEWLINE ~ ANY)+ }

// -- Nd

nd_open          = { "Nd" ~ block_line }
nd_block_element = { !("." ~ sh_block) ~ element }
nd_block         = { nd_open ~ (NEWLINE ~ nd_block_element*)? }

// -- Nm

nm_open          = { "Nm" ~ arg* }
nm_block_element = { !("." ~ (nm_block | sh_block | ss_block)) ~ element }
nm_block         = { nm_open ~ (NEWLINE ~ nm_block_element*)? }

// -- Sh

sh_open          = { "Sh" ~ block_line }
sh_block_element = { !("." ~ sh_block) ~ element }
sh_block         = { sh_open ~ (NEWLINE ~ sh_block_element*)? }

// -- Ss

ss_open          = { "Ss" ~ block_line }
ss_block_element = { !("." ~ (sh_block | ss_block)) ~ element }
ss_block         = { ss_open ~ (NEWLINE ~ ss_block_element*)? }

// ----- Block partial-implicit

aq_block  = { "Aq" ~ arg* }
bq_block  = { "Bq" ~ arg* }
brq_block = { "Brq" ~ arg* }
d1_block  = { "D1" ~ arg* }
dl_block  = { "Dl" ~ arg* }
dq_block  = { "Dq" ~ arg* }
en_block  = { "En" ~ arg+ }
op_block  = { "Op" ~ arg* }
pq_block  = { "Pq" ~ arg* }
ql_block  = { "Ql" ~ arg* }
qq_block  = { "Qq" ~ arg* }
sq_block  = { "Sq" ~ arg* }
vt_block  = { "Vt" ~ arg+ }

// ----- In-line

// -- Rs submacros

a = { "%A" ~ text_arg+ ~ NEWLINE? }
b = { "%B" ~ text_arg+ ~ NEWLINE? }
c = { "%C" ~ text_arg+ ~ NEWLINE? }

month     =  { text_arg }
day       = @{ (!(WHITESPACE | NEWLINE) ~ ASCII_DIGIT)+ }
month_day =  { month ~ day ~ "," }
year      =  { text_arg }
d         =  { "%D" ~ month_day? ~ year ~ NEWLINE? }

i = { "%I" ~ text_arg+ ~ NEWLINE? }
j = { "%J" ~ text_arg+ ~ NEWLINE? }
n = { "%N" ~ text_arg+ ~ NEWLINE? }
o = { "%O" ~ text_arg+ ~ NEWLINE? }
p = { "%P" ~ text_arg+ ~ NEWLINE? }
q = { "%Q" ~ text_arg+ ~ NEWLINE? }
r = { "%R" ~ text_arg+ ~ NEWLINE? }
t = { "%T" ~ text_arg+ ~ NEWLINE? }

uri = @{ (!"://" ~ ANY)+ ~ "://" ~ text_arg }
u   =  { "%U" ~ uri ~ NEWLINE? }

v = { "%V" ~ text_arg+ ~ NEWLINE? }

// -- Text production

at  = { "At" ~ text_arg? ~ NEWLINE? }
bsx = { "Bsx" ~ text_arg? ~ NEWLINE? }
bx  = { "Bx" ~ text_arg{0, 2} ~ NEWLINE? }
dx  = { "Dx" ~ text_arg? ~ NEWLINE? }
fx  = { "Fx" ~ text_arg? ~ NEWLINE? }
nx  = { "Nx" ~ text_arg? ~ NEWLINE? }
ox  = { "Ox" ~ text_arg? ~ NEWLINE? }
st  = { "St" ~ text_arg ~ NEWLINE? }

// -- Ad

ad = { "Ad" ~ arg+ ~ NEWLINE? }

// -- An

an_split    = { "-split" }
an_no_split = { "-nosplit" }
an_name     = { arg+ }
an          = { "An" ~ (an_split | an_no_split | an_name) ~ NEWLINE? }

// -- Ap

ap = { "Ap" ~ arg* ~ NEWLINE? }

// -- Ar

ar = { "Ar" ~ arg* ~ NEWLINE? }

// -- Bt

bt = { "Bt" ~ arg* ~ NEWLINE? }

// -- Cd

cd = { "Cd" ~ arg+ ~ NEWLINE? }

// -- Cm

cm = { "Cm" ~ arg+ ~ NEWLINE? }
